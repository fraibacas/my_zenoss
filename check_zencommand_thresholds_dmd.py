
from Products.ZenHub.services.CommandPerformanceConfig import CommandPerformanceConfig

def string_in_hex(s):
    return ":".join("{0:x}".format(ord(c)) for c in s)

def print_device_thresholds(device, collector):
    """ """
    print "=============================================================="
    d = find(device)
    print "Device: {0}".format(d.id)
    print "Device.__class__: {0}".format(d.__class__)
    print "Device Class: {0}".format(d.deviceClass.getPrimaryId())
    print "--------------------------------------------------------------"
    c = CommandPerformanceConfig(dmd,collector)
    dp = c._createDeviceProxy(d)
    if len(dp.thresholds) == 0:
        print 'No Thresholds defined for device {0}'.format(d.id)
    else:
        for t in dp.thresholds:
            print "    Threshold => {0}".format(t.id)
            print "    Datapoints => {0}".format(t.dataPointNames)
            print "    Min => {0}".format(t.minimum)
            print "    Min HEX => {0}".format(string_in_hex(str(t.minimum)))
            print "    Max => {0}".format(t.maximum)
            print "    Max HEX => {0}".format(string_in_hex(str(t.maximum)))

bad = [ '10.45.250.65', '10.45.250.96', '10.45.250.37', '10.45.250.40', '192.168.203.43', '10.45.226.1', '10.45.226.2', '10.45.226.4', '10.45.226.5', '10.45.226.6', '10.45.226.11', '10.45.226.12', '10.45.226.14', '192.168.200.193', '192.168.200.194', '10.45.250.74', '192.168.128.16', '192.168.128.15', '192.168.128.18', '192.168.128.17' ]

good = [ '10.45.253.177', '10.45.250.88', '10.45.250.89', '10.45.250.91', '10.45.250.92', '10.45.250.95', '10.45.250.15', '10.45.250.16', '10.45.250.72', '10.45.250.73', '10.45.250.75', '192.168.200.225', '10.51.198.131', '10.51.198.132', '10.20.8.18', '192.168.201.100', '10.51.196.65', '10.51.196.68', '10.51.196.72', '10.51.197.5', '10.51.196.66', '10.51.196.69', '10.51.196.73', '10.51.197.6', '10.20.2.139', '192.168.243.3', '192.168.243.4', '10.20.2.156', '192.168.201.65', '10.20.2.140', '10.20.8.26', '192.168.201.66', '192.168.201.67', '192.168.201.97', '192.168.201.98', '192.168.201.99', '10.51.198.129', '10.51.198.130', '10.20.8.23', '10.20.1.21', '10.20.1.29', '10.20.8.11', '10.20.8.12', '10.20.8.27', '10.20.8.28', '10.20.8.43', '10.20.2.155', '10.20.2.11', '10.20.2.12', '10.20.2.13', '10.20.2.14', '10.20.2.15', '10.20.2.16', '10.20.2.17', '10.20.1.13', '10.20.8.21', '192.168.200.217', '192.168.202.161', '192.168.208.33', '192.168.208.34', '192.168.208.35', '192.168.208.36', '192.168.208.37', '192.168.208.38', '192.168.208.39', '192.168.208.65', '192.168.200.65', '192.168.200.66', '192.168.200.67', '192.168.200.68', '192.168.200.69', '192.168.204.66', '192.168.204.81', '10.3.249.52', '10.3.249.21', '10.3.249.22', '10.3.249.23', '10.3.249.24', '10.3.249.25', '10.3.249.140', '10.3.249.142', '10.3.249.143', '10.3.249.150', '10.3.249.151', '10.3.249.152', '10.3.249.220', '10.3.249.221', '10.3.249.222', '10.3.249.141', '192.168.206.226', '192.168.200.209', '192.168.200.210', '192.168.200.211', '192.168.200.212', '192.168.200.213', '192.168.200.214', '192.168.200.215', '192.168.200.216', '192.168.204.65', '192.168.204.68', '192.168.209.225', '192.168.209.241', '192.168.204.69', '192.168.205.1', '192.168.209.97', '192.168.209.98', '192.168.209.99', '192.168.209.113', '192.168.209.114', '192.168.208.66', '192.168.204.177', '192.168.208.1', '192.168.205.97', '192.168.205.98', '192.168.205.113', '192.168.205.114', '192.168.205.17', '192.168.128.21', '10.3.249.51', '192.168.208.97', '192.168.128.22', '10.45.228.21', '10.45.228.22', '10.45.228.23', '10.45.228.24', '10.45.228.25', '192.168.207.225', '192.168.205.2', '192.168.204.70' ]


collector = 'm201sinf01v'

print '========================================================='
print '                 CHECKING {0} BAD DEVICES'.format(len(bad))
print '========================================================='

for d in bad:
    try:
        print_device_thresholds(d, collector)
    except:
        print 'Could not retrieve template for {}'.format(d)

print '========================================================='
print '                 CHECKING {0} GOOD DEVICES'.format(len(good))
print '========================================================='
for d in good:
    try:
        print_device_thresholds(d, collector)
    except:
        print 'Could not retrieve template for {}'.format(d)





